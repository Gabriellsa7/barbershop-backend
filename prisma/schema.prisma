generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model appointment {
  id                 String               @id
  date               DateTime
  startTime          String
  endTime            String
  status             appointment_status   @default(PENDING)
  createdAt          DateTime             @default(now())
  clientId           String
  barbershopId       String
  barbershop         barbershop           @relation(fields: [barbershopId], references: [id], map: "Appointment_barbershopId_fkey")
  user               user                 @relation(fields: [clientId], references: [id], map: "Appointment_clientId_fkey")
  appointmentservice appointmentservice[]
  payment            payment?

  @@index([barbershopId], map: "Appointment_barbershopId_fkey")
  @@index([clientId], map: "Appointment_clientId_fkey")
}

model appointmentservice {
  appointmentId String
  serviceId     String
  appointment   appointment @relation(fields: [appointmentId], references: [id], map: "AppointmentService_appointmentId_fkey")
  service       service     @relation(fields: [serviceId], references: [id], map: "AppointmentService_serviceId_fkey")

  @@id([appointmentId, serviceId])
  @@index([serviceId], map: "AppointmentService_serviceId_fkey")
}

model barbershop {
  id           String         @id
  name         String
  description  String?
  address      String
  latitude     Float
  longitude    Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  ownerId      String
  appointment  appointment[]
  user         user           @relation(fields: [ownerId], references: [id], map: "Barbershop_ownerId_fkey")
  closedday    closedday[]
  openinghours openinghours[]
  review       review[]
  service      service[]

  @@index([ownerId], map: "Barbershop_ownerId_fkey")
}

model chatmessage {
  id                                String    @id
  message                           String
  timestamp                         DateTime  @default(now())
  readAt                            DateTime?
  senderId                          String
  receiverId                        String
  user_chatmessage_receiverIdTouser user      @relation("chatmessage_receiverIdTouser", fields: [receiverId], references: [id], map: "ChatMessage_receiverId_fkey")
  user_chatmessage_senderIdTouser   user      @relation("chatmessage_senderIdTouser", fields: [senderId], references: [id], map: "ChatMessage_senderId_fkey")

  @@index([receiverId], map: "ChatMessage_receiverId_fkey")
  @@index([senderId], map: "ChatMessage_senderId_fkey")
}

model closedday {
  id           String     @id
  date         DateTime
  reason       String?
  barbershopId String
  barbershop   barbershop @relation(fields: [barbershopId], references: [id], map: "ClosedDay_barbershopId_fkey")

  @@index([barbershopId], map: "ClosedDay_barbershopId_fkey")
}

model notification {
  id        String    @id
  message   String
  type      String
  createdAt DateTime  @default(now())
  readAt    DateTime?
  userId    String
  user      user      @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([userId], map: "Notification_userId_fkey")
}

model openinghours {
  id           String     @id
  dayOfWeek    Int
  openTime     String
  closeTime    String
  lunchStart   String?
  lunchEnd     String?
  barbershopId String
  barbershop   barbershop @relation(fields: [barbershopId], references: [id], map: "OpeningHours_barbershopId_fkey")

  @@index([barbershopId], map: "OpeningHours_barbershopId_fkey")
}

model payment {
  id            String         @id
  amount        Float
  status        payment_status @default(PENDING)
  method        String
  transactionId String?
  createdAt     DateTime       @default(now())
  appointmentId String         @unique(map: "Payment_appointmentId_key")
  appointment   appointment    @relation(fields: [appointmentId], references: [id], map: "Payment_appointmentId_fkey")
}

model review {
  id           String     @id
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
  clientId     String
  barbershopId String
  barbershop   barbershop @relation(fields: [barbershopId], references: [id], map: "Review_barbershopId_fkey")
  user         user       @relation(fields: [clientId], references: [id], map: "Review_clientId_fkey")

  @@index([barbershopId], map: "Review_barbershopId_fkey")
  @@index([clientId], map: "Review_clientId_fkey")
}

model service {
  id                 String               @id
  name               String
  description        String?
  price              Float
  durationMinutes    Int
  barbershopId       String
  appointmentservice appointmentservice[]
  barbershop         barbershop           @relation(fields: [barbershopId], references: [id], map: "Service_barbershopId_fkey")

  @@index([barbershopId], map: "Service_barbershopId_fkey")
}

model user {
  id                                       String         @id
  name                                     String
  email                                    String         @unique(map: "User_email_key")
  passwordHash                             String
  createdAt                                DateTime       @default(now())
  updatedAt                                DateTime
  appointment                              appointment[]
  barbershop                               barbershop[]
  chatmessage_chatmessage_receiverIdTouser chatmessage[]  @relation("chatmessage_receiverIdTouser")
  chatmessage_chatmessage_senderIdTouser   chatmessage[]  @relation("chatmessage_senderIdTouser")
  notification                             notification[]
  review                                   review[]
}

enum payment_status {
  PENDING
  PAID
  FAILED
}

enum appointment_status {
  PENDING
  CONFIRMED
  CANCELLED
  DONE
}
